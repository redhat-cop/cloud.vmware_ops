---
- name: Test
  when: not run_on_simulator
  block:
    - name: Import common vars
      ansible.builtin.include_vars:
        file: ../group_vars.yml

    - name: Create Content Library
      ansible.builtin.import_role:
        name: cloud.vmware_ops.content_library

    - name: Get content libraries info
      ansible.builtin.import_tasks: get_content_library_info.yml

    - name: "Fail if content library {{ content_library_name }} does not exist"
      ansible.builtin.fail:
        msg: "Content library {{ content_library_name }} does not exist"
      when: content_library_details.results | map(attribute='content_lib_details') | flatten | map(attribute='library_name') is not ansible.builtin.contains(content_library_name)

    - name: Verify content library details
      ansible.builtin.assert:
        that:
          - item.content_lib_details[0].library_description == content_library_description
          - item.content_lib_details[0].library_type | lower == content_library_type
      when: item.content_lib_details[0].library_name == content_library_name
      loop: "{{ content_library_details.results }}"

  always:
    - name: Destroy Local Content Library
      vmware.vmware.local_content_library:
        hostname: "{{ vmware_ops_hostname }}"
        username: "{{ vmware_ops_username }}"
        password: "{{ vmware_ops_password }}"
        validate_certs: "{{ vmware_ops_validate_certs }}"
        library_name: "{{ content_library_name }}"
        state: absent
      retries: 5
      delay: 5
      register: result
      until: result.failed == false
      when: content_library_type == 'local'
    - name: Destroy Subscribed Content Library
      vmware.vmware.subscribed_content_library:
        hostname: "{{ vmware_ops_hostname }}"
        username: "{{ vmware_ops_username }}"
        password: "{{ vmware_ops_password }}"
        validate_certs: "{{ vmware_ops_validate_certs }}"
        library_name: "{{ content_library_name }}"
        state: absent
      retries: 5
      delay: 5
      register: result
      until: result.failed == false
      when: content_library_type == 'subscribed'

    - name: Get content libraries info
      ansible.builtin.import_tasks: get_content_library_info.yml

    - name: "Fail if content library {{ content_library_name }} still exists"
      ansible.builtin.fail:
        msg: "Content library {{ content_library_name }} still exists"
      when: content_library_details.results | map(attribute='content_lib_details') | flatten | map(attribute='library_name') is ansible.builtin.contains(content_library_name)
